{"version":3,"file":"static/js/161.556ef202.chunk.js","mappings":"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","sources":["redux/contacts/contacts-selectors.js","redux/filter/filter-selectors.js","../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/ContactsForm/contacts-form.module.css?aadd","components/ContactsForm/ContactsForm.jsx","webpack://react-homework-template/./src/components/ContactsList/list.module.css?19ad","components/ContactsList/ContactsList.jsx","components/Filter/Filter.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\nimport { selectFilter } from '../filter/filter-selectors';\n\nexport const selectContacts = store => store.contacts;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    if (!filter) {\n      return contacts.items;\n    }\n\n    const normalizedFilter = filter.toLowerCase();\n    const filteredContacts = contacts.items.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter)\n    );\n    return filteredContacts;\n  }\n);\n\n","export const selectFilter = store => store.filter;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"contacts-form_form__z9a+f\",\"wrap\":\"contacts-form_wrap__WG6DF\",\"btn\":\"contacts-form_btn__NqsqR\"};","import { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectContacts} from '../../redux/contacts/contacts-selectors'\nimport { addContact } from '../../redux/contacts/contacts-operations'\nimport { nanoid } from \"nanoid\";\nimport css from './contacts-form.module.css'\n\nconst INITIAL_STATE = {\n    name: '',\n    number: '',\n}\n\n\nconst ContactsForm = () => {\n  const [state, setState] = useState(INITIAL_STATE);\n\n  const {items} = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n\n\n  const onAddContact = (data) => {\n    // Якщо контакт вже існує:\n    const isExist = items.some(\n      (contact) => contact.name.toLowerCase() === data.name.toLowerCase());\n    \n    if (isExist) {\n      alert(`${data.name} is already in contacts.`);\n      return\n    }\n\n    dispatch(addContact(data));\n    setState({...INITIAL_STATE});\n  };\n\n  let contactNameId = nanoid();\n  let contactNumberId = nanoid();\n\n  const handleChange = ({ target }) => {\n    const { name, value } = target;\n    setState( prevState =>({...prevState, [name]: value }));\n  }\n\n  const handleSubmit = (e)=> {\n        e.preventDefault();\n        onAddContact({...state});\n  }\n  \n    return (\n      <form onSubmit={handleSubmit} className={css.form}>\n        <div className={css.wrap}>\n          <label htmlFor={contactNameId}>Name</label>\n          <input value={state.name} type=\"text\" id={contactNameId} required name=\"name\" onChange={handleChange}/>\n        </div>\n        <div className={css.wrap}>\n        <label htmlFor={contactNumberId}>Number</label>\n          <input value={state.number} type=\"tel\" id={contactNumberId} required name=\"number\" onChange={handleChange}/>\n        </div>\n        <button type=\"submit\" className={css.btn}>Add contact</button>\n      </form>\n    )\n  }\n\nexport default ContactsForm;","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"list_list__+8k6M\",\"deleteBtn\":\"list_deleteBtn__jhw++\"};","import { useSelector, useDispatch } from \"react-redux\";\nimport { deleteContact } from '../../redux/contacts/contacts-operations'\nimport { selectVisibleContacts } from '../../redux/contacts/contacts-selectors'\n\nimport css from './list.module.css'\n\nconst ContactsList = () => {\n\n    const items = useSelector(selectVisibleContacts);\n\n    const dispatch = useDispatch();\n\n    const onDeleteContact = (id) => {\n    dispatch(deleteContact(id))\n    }\n    \n    const elements = items.map(({id, name, number }) => <li key={id}>{name}: {number}  <button onClick={()=> onDeleteContact(id)} type=\"button\" className={css.deleteBtn}>Delete</button></li>)\n    \n    return (<>\n        {Boolean(items.length) && <ul className={css.list}>{elements}</ul>}\n    </>\n    )\n}\n\nexport default ContactsList;","import { setFilter } from '../../redux/filter/filter-slice'\nimport { useDispatch } from \"react-redux\";\n\n\n\nconst Filter = () => {\n\n  const dispatch = useDispatch();\n\nconst changeFitler = ({ target }) => {\n      dispatch(setFilter(target.value))\n    }\n\n  return <div>\n            <h3>Find contacts by name:</h3>\n            <input name=\"filter\" onChange={changeFitler} className=\"filter-input\" />\n          </div>\n}\n\nexport default Filter;","import { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport ContactsForm from '../../components/ContactsForm/ContactsForm';\nimport ContactsList from '../../components/ContactsList/ContactsList'\nimport Filter from \"../../components/Filter/Filter\";\nimport { fetchContacts } from '../../redux/contacts/contacts-operations'\nimport { selectContacts } from '../../redux/contacts/contacts-selectors'\n\n\nconst ContactsPage = () => {\n\n  const {items, isLoading, error} = useSelector(selectContacts);\n\n      const dispatch = useDispatch();\n      useEffect(() => {\n        dispatch(fetchContacts())\n      },[dispatch])\n\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactsForm />\n        {/* якщо є список контактів рендеримо розмітку, якщо пусто - то ні */}\n        {isLoading && <p>...Loading</p>}\n        {error && <p>{error}</p>}\n        {Boolean(items.length) && <>\n          <h2>Contacts</h2>\n          <Filter/>\n          <ContactsList />\n        </>\n        }\n      </div>\n    );\n  }\n\nexport default ContactsPage;\n\n"],"names":["selectContacts","store","contacts","selectVisibleContacts","createSelector","filter","items","normalizedFilter","toLowerCase","_ref","name","includes","nanoid","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","INITIAL_STATE","number","_useState","useState","_useState2","_slicedToArray","state","setState","useSelector","dispatch","useDispatch","contactNameId","contactNumberId","handleChange","target","value","prevState","_objectSpread","_defineProperty","_jsxs","onSubmit","e","data","preventDefault","some","contact","alert","concat","addContact","className","css","children","_jsx","htmlFor","type","required","onChange","elements","map","onClick","deleteContact","onDeleteContact","_Fragment","Boolean","setFilter","_useSelector","isLoading","error","useEffect","fetchContacts","ContactsForm","Filter","ContactsList"],"sourceRoot":""}