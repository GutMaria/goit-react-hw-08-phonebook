{"version":3,"file":"static/js/699.d25b0d1b.chunk.js","mappings":"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","sources":["redux/contacts/contacts-selectors.js","redux/filter/filter-selectors.js","components/ContactsForm/ContactsForm.jsx","../node_modules/@chakra-ui/layout/src/wrap.tsx","components/ContactsList/ContactsList.jsx","../node_modules/@chakra-ui/layout/src/flex.tsx","../node_modules/@chakra-ui/layout/src/text.tsx","../node_modules/@chakra-ui/object-utils/dist/chunk-R3DH46PF.mjs","components/Filter/Filter.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\nimport { selectFilter } from '../filter/filter-selectors';\n\nexport const selectContacts = store => store.contacts;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    if (!filter) {\n      return contacts.items;\n    }\n\n    const normalizedFilter = filter.toLowerCase();\n    const filteredContacts = contacts.items.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter)\n    );\n    return filteredContacts;\n  }\n);\n\n","export const selectFilter = store => store.filter;\n","import { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectContacts} from '../../redux/contacts/contacts-selectors'\nimport { addContact } from '../../redux/contacts/contacts-operations'\n// import { nanoid } from \"nanoid\";\n// import css from './contacts-form.module.css'\nimport { Button, FormControl,  FormLabel, Input} from '@chakra-ui/react'\n\nconst INITIAL_STATE = {\n    name: '',\n    number: '',\n}\n\n\nconst ContactsForm = () => {\n  const [state, setState] = useState(INITIAL_STATE);\n\n  const {items} = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n\n\n  const onAddContact = (data) => {\n    // Якщо контакт вже існує:\n    const isExist = items.some(\n      (contact) => contact.name.toLowerCase() === data.name.toLowerCase());\n    \n    if (isExist) {\n      alert(`${data.name} is already in contacts.`);\n      return\n    }\n\n    dispatch(addContact(data));\n    setState({...INITIAL_STATE});\n  };\n\n  // let contactNameId = nanoid();\n  // let contactNumberId = nanoid();\n\n  const handleChange = ({ target }) => {\n    const { name, value } = target;\n    setState( prevState =>({...prevState, [name]: value }));\n  }\n\n  const handleSubmit = (e)=> {\n        e.preventDefault();\n        onAddContact({...state});\n  }\n  \n    return (\n      <form onSubmit={handleSubmit} >\n        <FormControl w={400} isRequired>\n        <div >\n          <FormLabel >Name</FormLabel>\n          <Input value={state.name} type=\"text\"   name=\"name\" onChange={handleChange}/>\n        </div>\n        <div >\n        <FormLabel >Number</FormLabel>\n          <Input value={state.number} type=\"tel\"   name=\"number\" onChange={handleChange}/>\n        </div>\n          <Button type=\"submit\" colorScheme='teal' size='sm' >Add contact</Button>\n          </FormControl>\n      </form>\n    )\n  }\n\nexport default ContactsForm;","import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { Children, useMemo } from \"react\"\n\nexport interface WrapProps extends HTMLChakraProps<\"div\"> {\n  /**\n   * The space between each child (even if it wraps)\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The horizontal space between the each child (even if it wraps). Defaults to `spacing` if not defined.\n   * @type SystemProps[\"margin\"]\n   */\n  spacingX?: SystemProps[\"margin\"]\n  /**\n   * The vertical space between the each child (even if it wraps). Defaults to `spacing` if not defined.\n   * @type SystemProps[\"margin\"]\n   */\n  spacingY?: SystemProps[\"margin\"]\n  /**\n   * The `justify-content` value (for cross-axis alignment)\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * The `align-items` value (for main axis alignment)\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * The `flex-direction` value\n   * @type SystemProps[\"flexDirection\"]\n   */\n  direction?: SystemProps[\"flexDirection\"]\n  /**\n   * If `true`, the children will be wrapped in a `WrapItem`\n   * @default false\n   */\n  shouldWrapChildren?: boolean\n}\n\n/**\n * Layout component used to stack elements that differ in length\n * and are liable to wrap.\n *\n * Common use cases:\n * - Buttons that appear together at the end of forms\n * - Lists of tags and chips\n *\n * @see Docs https://chakra-ui.com/wrap\n */\nexport const Wrap = forwardRef<WrapProps, \"div\">(function Wrap(props, ref) {\n  const {\n    spacing = \"0.5rem\",\n    spacingX,\n    spacingY,\n    children,\n    justify,\n    direction,\n    align,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  const _children = useMemo(\n    () =>\n      shouldWrapChildren\n        ? Children.map(children, (child, index) => (\n            <WrapItem key={index}>{child}</WrapItem>\n          ))\n        : children,\n    [children, shouldWrapChildren],\n  )\n\n  return (\n    <chakra.div ref={ref} className={cx(\"chakra-wrap\", className)} {...rest}>\n      <chakra.ul\n        className=\"chakra-wrap__list\"\n        __css={{\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          justifyContent: justify,\n          alignItems: align,\n          flexDirection: direction,\n          listStyleType: \"none\",\n          gap: spacing,\n          columnGap: spacingX,\n          rowGap: spacingY,\n          padding: \"0\",\n        }}\n      >\n        {_children}\n      </chakra.ul>\n    </chakra.div>\n  )\n})\n\nWrap.displayName = \"Wrap\"\n\nexport interface WrapItemProps extends HTMLChakraProps<\"li\"> {}\n\nexport const WrapItem = forwardRef<WrapItemProps, \"li\">(function WrapItem(\n  props,\n  ref,\n) {\n  const { className, ...rest } = props\n  return (\n    <chakra.li\n      ref={ref}\n      __css={{ display: \"flex\", alignItems: \"flex-start\" }}\n      className={cx(\"chakra-wrap__listitem\", className)}\n      {...rest}\n    />\n  )\n})\n\nWrapItem.displayName = \"WrapItem\"\n","import { useSelector, useDispatch } from \"react-redux\";\nimport { deleteContact } from '../../redux/contacts/contacts-operations'\nimport { selectVisibleContacts } from '../../redux/contacts/contacts-selectors'\n\n// import css from './list.module.css'\nimport { Box, Button, Wrap, WrapItem } from '@chakra-ui/react'\n\nconst ContactsList = () => {\n\n    const items = useSelector(selectVisibleContacts);\n\n    const dispatch = useDispatch();\n\n    const onDeleteContact = (id) => {\n    dispatch(deleteContact(id))\n    }\n    \n    const elements = items.map(({id, name, number }) => <WrapItem key={id} w=\"100%\" justifyContent=\"space-between\" alignItems='center'  >{name}: {number}  <Button onClick={()=> onDeleteContact(id)} type=\"button\" colorScheme='teal' size='xs' width='80px' >Delete</Button></WrapItem>)\n    \n    return (<Box fontSize='md' w='md' p='10px' borderWidth='1px' borderRadius='lg' borderColor='teal' overflow='hidden'>\n        {Boolean(items.length) && <Wrap direction='column' w=\"100%\">{elements}</Wrap>}\n    </Box>\n    )\n}\n\nexport default ContactsList;","import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface FlexOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n\n  /**\n   * Shorthand for `flexDirection` style prop\n   * @type SystemProps[\"flexDirection\"]\n   * @default \"row\"\n   */\n  direction?: SystemProps[\"flexDirection\"]\n\n  /**\n   * Shorthand for `flexBasis` style prop\n   * @type SystemProps[\"flexBasis\"]\n   */\n  basis?: SystemProps[\"flexBasis\"]\n\n  /**\n   * Shorthand for `flexGrow` style prop\n   * @type SystemProps[\"flexGrow\"]\n   */\n  grow?: SystemProps[\"flexGrow\"]\n\n  /**\n   * Shorthand for `flexShrink` style prop\n   * @type SystemProps[\"flexShrink\"]\n   */\n  shrink?: SystemProps[\"flexShrink\"]\n}\n\nexport interface FlexProps extends HTMLChakraProps<\"div\">, FlexOptions {}\n\n/**\n * React component used to create flexbox layouts.\n *\n * It renders a `div` with `display: flex` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/flex\n */\nexport const Flex = forwardRef<FlexProps, \"div\">(function Flex(props, ref) {\n  const { direction, align, justify, wrap, basis, grow, shrink, ...rest } =\n    props\n\n  const styles = {\n    display: \"flex\",\n    flexDirection: direction,\n    alignItems: align,\n    justifyContent: justify,\n    flexWrap: wrap,\n    flexBasis: basis,\n    flexGrow: grow,\n    flexShrink: shrink,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nFlex.displayName = \"Flex\"\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\n\nexport interface TextProps extends HTMLChakraProps<\"p\">, ThemingProps<\"Text\"> {\n  /**\n   * The CSS `text-align` property\n   * @type SystemProps[\"textAlign\"]\n   */\n  align?: SystemProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property\n   * @type SystemProps[\"textDecoration\"]\n   */\n  decoration?: SystemProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property\n   * @type SystemProps[\"textTransform\"]\n   */\n  casing?: SystemProps[\"textTransform\"]\n}\n\n/**\n * Used to render texts or paragraphs.\n *\n * @see Docs https://chakra-ui.com/text\n */\nexport const Text = forwardRef<TextProps, \"p\">(function Text(props, ref) {\n  const styles = useStyleConfig(\"Text\", props)\n  const { className, align, decoration, casing, ...rest } =\n    omitThemingProps(props)\n\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing,\n  })\n\n  return (\n    <chakra.p\n      ref={ref}\n      className={cx(\"chakra-text\", props.className)}\n      {...aliasedProps}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nText.displayName = \"Text\"\n","// src/compact.ts\nfunction compact(object) {\n  const clone = Object.assign({}, object);\n  for (let key in clone) {\n    if (clone[key] === void 0)\n      delete clone[key];\n  }\n  return clone;\n}\n\nexport {\n  compact\n};\n","import { setFilter } from '../../redux/filter/filter-slice'\nimport { useDispatch } from \"react-redux\";\n\nimport { Flex , Input, Text  } from '@chakra-ui/react'\n\n\n\nconst Filter = () => {\n\n  const dispatch = useDispatch();\n\nconst changeFitler = ({ target }) => {\n      dispatch(setFilter(target.value))\n    }\n\n  return <Flex  w='md' mb='20px'>\n            <Text fontSize='lg'mr='10px' >Find contacts by name:</Text>\n            <Input name=\"filter\" flex='1' size='sm' width='auto' onChange={changeFitler} borderRadius={4} />\n          </Flex>\n}\n\nexport default Filter;","import { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport ContactsForm from '../../components/ContactsForm/ContactsForm';\nimport ContactsList from '../../components/ContactsList/ContactsList'\nimport Filter from \"../../components/Filter/Filter\";\nimport { fetchContacts } from '../../redux/contacts/contacts-operations'\nimport { selectContacts } from '../../redux/contacts/contacts-selectors'\n\n\nconst ContactsPage = () => {\n\n  const {items, isLoading, error} = useSelector(selectContacts);\n\n      const dispatch = useDispatch();\n      useEffect(() => {\n        dispatch(fetchContacts())\n      },[dispatch])\n\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactsForm />\n        {/* якщо є список контактів рендеримо розмітку, якщо пусто - то ні */}\n        {isLoading && <p>...Loading</p>}\n        {error && <p>{error}</p>}\n        {Boolean(items.length) && <>\n          <h2>Contacts</h2>\n          <Filter/>\n          <ContactsList />\n        </>\n        }\n      </div>\n    );\n  }\n\nexport default ContactsPage;\n\n"],"names":["selectContacts","store","contacts","selectVisibleContacts","createSelector","filter","items","normalizedFilter","toLowerCase","_ref","name","includes","INITIAL_STATE","number","_useState","useState","_useState2","_slicedToArray","state","setState","useSelector","dispatch","useDispatch","handleChange","target","value","prevState","_objectSpread","_defineProperty","_jsx","onSubmit","e","data","preventDefault","some","contact","alert","concat","addContact","children","_jsxs","FormControl","w","isRequired","FormLabel","Input","type","onChange","Button","colorScheme","size","Wrap","forwardRef","props","ref","spacing","spacingX","spacingY","justify","direction","align","className","shouldWrapChildren","rest","_children","useMemo","Children","child","index","WrapItem","chakra","div","cx","__css","display","flexWrap","justifyContent","alignItems","flexDirection","listStyleType","gap","columnGap","rowGap","padding","displayName","li","elements","map","id","onClick","deleteContact","onDeleteContact","width","Box","fontSize","p","borderWidth","borderRadius","borderColor","overflow","Boolean","length","Flex","wrap","basis","grow","shrink","styles","flexBasis","flexGrow","flexShrink","Text","useStyleConfig","omitThemingProps","decoration","casing","aliasedProps","object","clone","Object","assign","key","compact","textAlign","textDecoration","textTransform","mb","mr","flex","setFilter","_useSelector","isLoading","error","useEffect","fetchContacts","ContactsForm","_Fragment","Filter","ContactsList"],"sourceRoot":""}