{"version":3,"file":"static/js/271.3e6c393e.chunk.js","mappings":"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","sources":["redux/contacts/contacts-selectors.js","redux/filter/filter-selectors.js","components/ContactsForm/ContactsForm.jsx","../node_modules/@chakra-ui/layout/src/wrap.tsx","components/ContactsList/ContactsList.jsx","components/Filter/Filter.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\nimport { selectFilter } from '../filter/filter-selectors';\n\nexport const selectContacts = store => store.contacts;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    if (!filter) {\n      return contacts.items;\n    }\n\n    const normalizedFilter = filter.toLowerCase();\n    const filteredContacts = contacts.items.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter)\n    );\n    return filteredContacts;\n  }\n);\n\n","export const selectFilter = store => store.filter;\n","import { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectContacts} from '../../redux/contacts/contacts-selectors'\nimport { addContact } from '../../redux/contacts/contacts-operations'\nimport {  Box, Button, FormControl, FormLabel, Input } from '@chakra-ui/react'\n\nconst INITIAL_STATE = {\n    name: '',\n    number: '',\n}\n\n\nconst ContactsForm = () => {\n  const [state, setState] = useState(INITIAL_STATE);\n  const [isAddingContact, setIsAddingContact] = useState(false);\n\n  const {items} = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n\n\n  const onAddContact = async (data) => {\n    setIsAddingContact(true);\n    // Якщо контакт вже існує:\n    const isExist = items.some(\n      (contact) => contact.name.toLowerCase() === data.name.toLowerCase());\n    \n    if (isExist) {\n      alert(`${data.name} is already in contacts.`);\n      setIsAddingContact(false);\n      return\n    }\n\n    await dispatch(addContact(data));\n    setState({ ...INITIAL_STATE });\n    setIsAddingContact(false);\n  };\n\n  // let contactNameId = nanoid();\n  // let contactNumberId = nanoid();\n\n  const handleChange = ({ target }) => {\n    const { name, value } = target;\n    setState( prevState =>({...prevState, [name]: value }));\n  }\n\n  const handleSubmit = (e)=> {\n        e.preventDefault();\n        onAddContact({...state});\n  }\n  \n    return (\n      <form onSubmit={handleSubmit}  style={{ maxWidth: '360px' }} >\n        <FormControl  maxW={[180, 300]} isRequired bg='white'  p=\"20px 30px\"  border='1px solid teal' borderRadius='10px'>\n        <Box mb='10px' >\n          <FormLabel fontSize='sm' >Name</FormLabel>\n          <Input value={state.name} type=\"text\" size='sm'  name=\"name\" onChange={handleChange} maxW={[150, 270]}/>\n        </Box>\n        <Box mb='20px'>\n        <FormLabel fontSize='sm'>Number</FormLabel>\n          <Input value={state.number} type=\"tel\" size='sm'  name=\"number\" onChange={handleChange} maxW={[150, 270]}/>\n          </Box>\n          {isAddingContact ? <Button isLoading colorScheme='teal' size='sm' w='110px' variant='solid'>\n    Email\n  </Button> : <Button type=\"submit\" colorScheme='teal' size='sm' w='110px' >Add contact</Button> }\n          \n          </FormControl>\n      </form>\n    )\n  }\n\nexport default ContactsForm;","import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { Children, useMemo } from \"react\"\n\nexport interface WrapProps extends HTMLChakraProps<\"div\"> {\n  /**\n   * The space between each child (even if it wraps)\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The horizontal space between the each child (even if it wraps). Defaults to `spacing` if not defined.\n   * @type SystemProps[\"margin\"]\n   */\n  spacingX?: SystemProps[\"margin\"]\n  /**\n   * The vertical space between the each child (even if it wraps). Defaults to `spacing` if not defined.\n   * @type SystemProps[\"margin\"]\n   */\n  spacingY?: SystemProps[\"margin\"]\n  /**\n   * The `justify-content` value (for cross-axis alignment)\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * The `align-items` value (for main axis alignment)\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * The `flex-direction` value\n   * @type SystemProps[\"flexDirection\"]\n   */\n  direction?: SystemProps[\"flexDirection\"]\n  /**\n   * If `true`, the children will be wrapped in a `WrapItem`\n   * @default false\n   */\n  shouldWrapChildren?: boolean\n}\n\n/**\n * Layout component used to stack elements that differ in length\n * and are liable to wrap.\n *\n * Common use cases:\n * - Buttons that appear together at the end of forms\n * - Lists of tags and chips\n *\n * @see Docs https://chakra-ui.com/wrap\n */\nexport const Wrap = forwardRef<WrapProps, \"div\">(function Wrap(props, ref) {\n  const {\n    spacing = \"0.5rem\",\n    spacingX,\n    spacingY,\n    children,\n    justify,\n    direction,\n    align,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  const _children = useMemo(\n    () =>\n      shouldWrapChildren\n        ? Children.map(children, (child, index) => (\n            <WrapItem key={index}>{child}</WrapItem>\n          ))\n        : children,\n    [children, shouldWrapChildren],\n  )\n\n  return (\n    <chakra.div ref={ref} className={cx(\"chakra-wrap\", className)} {...rest}>\n      <chakra.ul\n        className=\"chakra-wrap__list\"\n        __css={{\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          justifyContent: justify,\n          alignItems: align,\n          flexDirection: direction,\n          listStyleType: \"none\",\n          gap: spacing,\n          columnGap: spacingX,\n          rowGap: spacingY,\n          padding: \"0\",\n        }}\n      >\n        {_children}\n      </chakra.ul>\n    </chakra.div>\n  )\n})\n\nWrap.displayName = \"Wrap\"\n\nexport interface WrapItemProps extends HTMLChakraProps<\"li\"> {}\n\nexport const WrapItem = forwardRef<WrapItemProps, \"li\">(function WrapItem(\n  props,\n  ref,\n) {\n  const { className, ...rest } = props\n  return (\n    <chakra.li\n      ref={ref}\n      __css={{ display: \"flex\", alignItems: \"flex-start\" }}\n      className={cx(\"chakra-wrap__listitem\", className)}\n      {...rest}\n    />\n  )\n})\n\nWrapItem.displayName = \"WrapItem\"\n","import { useSelector, useDispatch } from \"react-redux\";\nimport { useState } from \"react\";\nimport { deleteContact } from '../../redux/contacts/contacts-operations'\nimport { selectVisibleContacts } from '../../redux/contacts/contacts-selectors'\n\n// import css from './list.module.css'\nimport { Box, Button, Wrap, WrapItem } from '@chakra-ui/react'\n\nconst ContactsList = () => {\n\n    const items = useSelector(selectVisibleContacts);\n    const [deletingContactId, setDeletingContactId] = useState(null);\n\n    const dispatch = useDispatch();\n\n    const onDeleteContact = async (id) => {\n        setDeletingContactId(id);\n        await dispatch(deleteContact(id));\n        setDeletingContactId(null);\n    }\n    \n    const elements = items.map(({ id, name, number }) => <WrapItem key={id} justifyContent=\"space-between\" alignItems='center'  >{name}: {number}\n        {deletingContactId === id ?\n            <Button isLoading colorScheme='teal' variant='ghost' size='xs' w='50px' /> :\n            (<Button onClick={() => onDeleteContact(id)} type=\"button\" colorScheme='teal' variant='ghost' size='xs' maxW={[50, 80]} >Delete</Button>)}  </WrapItem>)\n\n    return (<Box fontSize='md' bg='white'  maxW={[180, 300]}  p=\"0px 30px\"  border='1px solid teal' borderRadius='10px' >\n        {Boolean(items.length) && <Wrap margin='0px' direction='column'   >{elements}</Wrap>}\n    </Box>\n    )\n}\n\nexport default ContactsList;","import { setFilter } from '../../redux/filter/filter-slice'\nimport { useDispatch } from \"react-redux\";\n\nimport { Flex , Input, Text  } from '@chakra-ui/react'\n\n\n\nconst Filter = () => {\n\n  const dispatch = useDispatch();\n\nconst changeFitler = ({ target }) => {\n      dispatch(setFilter(target.value))\n    }\n\n  return <Flex  maxW={[240, 360]} m='20px 0px' flexWrap='wrap' alignItems='center'>\n            <Text fontSize='lg' fontWeight='medium'  m='0px' mr='10px' >Find contacts by name:</Text>\n            <Input  onChange={changeFitler} name=\"filter\" flex='1' size='sm' w='auto' minW='120px' bg='white' border='1px solid teal' borderRadius='5px'/>\n          </Flex>\n}\n\nexport default Filter;","import { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport ContactsForm from '../../components/ContactsForm/ContactsForm';\nimport ContactsList from '../../components/ContactsList/ContactsList'\nimport Filter from \"../../components/Filter/Filter\";\nimport { fetchContacts } from '../../redux/contacts/contacts-operations'\nimport { selectContacts } from '../../redux/contacts/contacts-selectors'\nimport { Heading, Box} from '@chakra-ui/react'\nimport { Center, CircularProgress } from '@chakra-ui/react'\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n\nconst ContactsPage = () => {\n\n  const {items,  error} = useSelector(selectContacts);\n\n  const dispatch = useDispatch();\n\n  const [isFirstMount, setIsFirstMount] = useState(true);\n  \n  useEffect(() => {\n    if (isFirstMount) {\n      dispatch(fetchContacts());\n      setIsFirstMount(false);\n    }\n  }, [dispatch, isFirstMount]);\n\n  return (\n    <Box mt={[\"30px\", '50px'] }>\n        {isFirstMount && <Center ><CircularProgress isIndeterminate color='teal' /></Center>}\n        <Heading size='md' mt='0px' >Your contacts</Heading>\n        <ContactsForm />\n        {/* якщо є список контактів рендеримо розмітку, якщо пусто - то ні */}\n        {Boolean(items.length) && <>\n          <Filter/>\n          <ContactsList />\n        </>\n        }\n        {error && (Notify.failure('Oops, something went wrong, please try again')) }\n      </Box>\n    );\n  }\n\nexport default ContactsPage;\n\n"],"names":["selectContacts","store","contacts","selectVisibleContacts","createSelector","filter","items","normalizedFilter","toLowerCase","_ref","name","includes","INITIAL_STATE","number","_useState","useState","_useState2","_slicedToArray","state","setState","_useState3","_useState4","isAddingContact","setIsAddingContact","useSelector","dispatch","useDispatch","onAddContact","_asyncToGenerator","_regeneratorRuntime","_callee","data","_context","prev","next","some","contact","alert","concat","abrupt","addContact","_objectSpread","stop","_x","apply","arguments","handleChange","_ref2","target","value","prevState","_defineProperty","_jsx","onSubmit","e","preventDefault","style","maxWidth","children","_jsxs","FormControl","maxW","isRequired","bg","p","border","borderRadius","Box","mb","FormLabel","fontSize","Input","type","size","onChange","Button","isLoading","colorScheme","w","variant","Wrap","forwardRef","props","ref","spacing","spacingX","spacingY","justify","direction","align","className","shouldWrapChildren","rest","_children","useMemo","Children","child","index","WrapItem","chakra","div","cx","__css","display","flexWrap","justifyContent","alignItems","flexDirection","listStyleType","gap","columnGap","rowGap","padding","displayName","li","deletingContactId","setDeletingContactId","onDeleteContact","id","deleteContact","elements","map","onClick","Boolean","length","margin","Flex","m","Text","fontWeight","mr","setFilter","flex","minW","_useSelector","error","isFirstMount","setIsFirstMount","useEffect","fetchContacts","mt","Center","CircularProgress","isIndeterminate","color","Heading","ContactsForm","_Fragment","Filter","ContactsList","Notify"],"sourceRoot":""}